//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Manual changes will be overwritten.                                              *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package measurement

import (
	"database/sql/driver"
	"fmt"

	"github.com/boundedinfinity/enumer"
)

// /////////////////////////////////////////////////////////////////
//  MeasurmentFormat Stringer implemenation
// /////////////////////////////////////////////////////////////////

func (t MeasurmentFormat) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  MeasurmentFormat JSON marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t MeasurmentFormat) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *MeasurmentFormat) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, MeasurmentFormats.Parse)
}

// /////////////////////////////////////////////////////////////////
//  MeasurmentFormat YAML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t MeasurmentFormat) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *MeasurmentFormat) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, MeasurmentFormats.Parse)
}

// /////////////////////////////////////////////////////////////////
//  MeasurmentFormat SQL Database marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t MeasurmentFormat) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *MeasurmentFormat) Scan(value interface{}) error {
	return enumer.Scan(value, t, MeasurmentFormats.Parse)
}

// /////////////////////////////////////////////////////////////////
//
//  Enumeration
//
// /////////////////////////////////////////////////////////////////

var MeasurmentFormats = struct {
	measurmentFormats
	Err    error
	Values []MeasurmentFormat
}{
	measurmentFormats: measurmentFormats{
		Full:         MeasurmentFormat("full"),
		Abbreviation: MeasurmentFormat("abbreviation"),
	},
	Err: fmt.Errorf("invalid MeasurmentFormat"),
}

func init() {
	MeasurmentFormats.Values = []MeasurmentFormat{
		MeasurmentFormats.Full,
		MeasurmentFormats.Abbreviation,
	}
}

func (t measurmentFormats) newErr(a any, values ...MeasurmentFormat) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		MeasurmentFormats.Err,
		a,
		enumer.Join(values, ", "),
	)
}

func (t measurmentFormats) ParseFrom(v string, values ...MeasurmentFormat) (MeasurmentFormat, error) {
	var found MeasurmentFormat
	var ok bool

	for _, value := range values {
		if enumer.IsEq[string, MeasurmentFormat](v)(value) {
			found = value
			ok = true
			break
		}
	}

	if !ok {
		return found, t.newErr(v, values...)
	}

	return found, nil
}

func (t measurmentFormats) Parse(v string) (MeasurmentFormat, error) {
	return t.ParseFrom(v, MeasurmentFormats.Values...)
}

func (t measurmentFormats) IsFrom(v string, values ...MeasurmentFormat) bool {
	for _, value := range values {
		if enumer.IsEq[string, MeasurmentFormat](v)(value) {
			return true
		}
	}
	return false
}

func (t measurmentFormats) Is(v string) bool {
	return t.IsFrom(v, MeasurmentFormats.Values...)
}
