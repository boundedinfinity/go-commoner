package measurement

import (
	"database/sql/driver"
	"encoding/xml"
	"fmt"
	enumer "github.com/boundedinfinity/enumer"
)

//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Manual changes will be overwritten.                                              *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

type AreaUnit string

func (t AreaUnit) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  JSON serialization
// /////////////////////////////////////////////////////////////////

func (t AreaUnit) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *AreaUnit) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, AreaUnits.Parse)
}

// /////////////////////////////////////////////////////////////////
//  YAML serialization
// /////////////////////////////////////////////////////////////////

func (t AreaUnit) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *AreaUnit) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, AreaUnits.Parse)
}

// /////////////////////////////////////////////////////////////////
//  XML serialization
// /////////////////////////////////////////////////////////////////

func (t AreaUnit) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return enumer.MarshalXML(t, e, start)
}

func (t *AreaUnit) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	return enumer.UnmarshalXML(t, AreaUnits.Parse, d, start)
}

// /////////////////////////////////////////////////////////////////
//  SQL serialization
// /////////////////////////////////////////////////////////////////

func (t AreaUnit) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *AreaUnit) Scan(value interface{}) error {
	return enumer.Scan(value, t, AreaUnits.Parse)
}

// /////////////////////////////////////////////////////////////////
//  Companion
// /////////////////////////////////////////////////////////////////

type areaUnits struct {
	SquareMile AreaUnit
	Acre       AreaUnit
	Rood       AreaUnit
	SquareYard AreaUnit
	SquareFoot AreaUnit
	SquareInch AreaUnit
	Values     []AreaUnit
	Err        error
}

var AreaUnits = areaUnits{

	Acre:       AreaUnit("acre"),
	Err:        fmt.Errorf("invalid AreaUnit"),
	Rood:       AreaUnit("rood"),
	SquareFoot: AreaUnit("square-foot"),
	SquareInch: AreaUnit("square-inch"),
	SquareMile: AreaUnit("square-mile"),
	SquareYard: AreaUnit("square-yard"),
}

func init() {
	AreaUnits.Values = []AreaUnit{
		AreaUnits.SquareMile,
		AreaUnits.Acre,
		AreaUnits.Rood,
		AreaUnits.SquareYard,
		AreaUnits.SquareFoot,
		AreaUnits.SquareInch,
	}
}

func (t areaUnits) newErr(a any, values ...AreaUnit) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		AreaUnits.Err,
		a,
		enumer.Join(values, ", "))
}

func (t areaUnits) ParseFrom(v string, values ...AreaUnit) (AreaUnit, error) {
	var found AreaUnit
	var ok bool

	for _, value := range values {
		if enumer.IsEq[string, AreaUnit](v)(value) {
			found = value
			ok = true
			break
		}
	}

	if !ok {
		return found, t.newErr(v, values...)
	}

	return found, nil
}

func (t areaUnits) Parse(v string) (AreaUnit, error) {
	return t.ParseFrom(v, AreaUnits.Values...)
}

func (t areaUnits) IsFrom(v string, values ...AreaUnit) bool {
	for _, value := range values {
		if enumer.IsEq[string, AreaUnit](v)(value) {
			return true
		}
	}
	return false
}

func (t areaUnits) Is(v string) bool {
	return t.IsFrom(v, AreaUnits.Values...)
}
