package measurement

import (
	"database/sql/driver"
	"encoding/xml"
	"fmt"
	enumer "github.com/boundedinfinity/enumer"
)

//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Manual changes will be overwritten.                                              *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

type ImperialMassUnit string

func (t ImperialMassUnit) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  JSON serialization
// /////////////////////////////////////////////////////////////////

func (t ImperialMassUnit) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *ImperialMassUnit) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, ImperialMassUnits.Parse)
}

// /////////////////////////////////////////////////////////////////
//  YAML serialization
// /////////////////////////////////////////////////////////////////

func (t ImperialMassUnit) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *ImperialMassUnit) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, ImperialMassUnits.Parse)
}

// /////////////////////////////////////////////////////////////////
//  XML serialization
// /////////////////////////////////////////////////////////////////

func (t ImperialMassUnit) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return enumer.MarshalXML(t, e, start)
}

func (t *ImperialMassUnit) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	return enumer.UnmarshalXML(t, ImperialMassUnits.Parse, d, start)
}

// /////////////////////////////////////////////////////////////////
//  SQL serialization
// /////////////////////////////////////////////////////////////////

func (t ImperialMassUnit) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *ImperialMassUnit) Scan(value interface{}) error {
	return enumer.Scan(value, t, ImperialMassUnits.Parse)
}

// /////////////////////////////////////////////////////////////////
//  Companion
// /////////////////////////////////////////////////////////////////

type imperialMassUnits struct {
	Grain             ImperialMassUnit
	PennyWeight       ImperialMassUnit
	Scruple           ImperialMassUnit
	Drachm            ImperialMassUnit
	Ounce             ImperialMassUnit
	OunceApothecaries ImperialMassUnit
	Pound             ImperialMassUnit
	Dram              ImperialMassUnit
	Stone             ImperialMassUnit
	Quarter           ImperialMassUnit
	Cental            ImperialMassUnit
	HundredWeight     ImperialMassUnit
	Ton               ImperialMassUnit
	MetricTon         ImperialMassUnit
	Quintal           ImperialMassUnit
	Slug              ImperialMassUnit
	Values            []ImperialMassUnit
	Err               error
}

var ImperialMassUnits = imperialMassUnits{

	Cental:            ImperialMassUnit("cental"),
	Drachm:            ImperialMassUnit("drachm"),
	Dram:              ImperialMassUnit("dram"),
	Err:               fmt.Errorf("invalid ImperialMassUnit"),
	Grain:             ImperialMassUnit("grain"),
	HundredWeight:     ImperialMassUnit("hundred-weight"),
	MetricTon:         ImperialMassUnit("metric-ton"),
	Ounce:             ImperialMassUnit("ounce"),
	OunceApothecaries: ImperialMassUnit("ounce-apothecaries"),
	PennyWeight:       ImperialMassUnit("penny-weight"),
	Pound:             ImperialMassUnit("pound"),
	Quarter:           ImperialMassUnit("quarter"),
	Quintal:           ImperialMassUnit("quintal"),
	Scruple:           ImperialMassUnit("scruple"),
	Slug:              ImperialMassUnit("slug"),
	Stone:             ImperialMassUnit("stone"),
	Ton:               ImperialMassUnit("ton"),
}

func init() {
	ImperialMassUnits.Values = []ImperialMassUnit{
		ImperialMassUnits.Grain,
		ImperialMassUnits.PennyWeight,
		ImperialMassUnits.Scruple,
		ImperialMassUnits.Drachm,
		ImperialMassUnits.Ounce,
		ImperialMassUnits.OunceApothecaries,
		ImperialMassUnits.Pound,
		ImperialMassUnits.Dram,
		ImperialMassUnits.Stone,
		ImperialMassUnits.Quarter,
		ImperialMassUnits.Cental,
		ImperialMassUnits.HundredWeight,
		ImperialMassUnits.Ton,
		ImperialMassUnits.MetricTon,
		ImperialMassUnits.Quintal,
		ImperialMassUnits.Slug,
	}
}

func (t imperialMassUnits) newErr(a any, values ...ImperialMassUnit) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		ImperialMassUnits.Err,
		a,
		enumer.Join(values, ", "))
}

func (t imperialMassUnits) ParseFrom(v string, values ...ImperialMassUnit) (ImperialMassUnit, error) {
	var found ImperialMassUnit
	var ok bool

	for _, value := range values {
		if enumer.IsEq[string, ImperialMassUnit](v)(value) {
			found = value
			ok = true
			break
		}
	}

	if !ok {
		return found, t.newErr(v, values...)
	}

	return found, nil
}

func (t imperialMassUnits) Parse(v string) (ImperialMassUnit, error) {
	return t.ParseFrom(v, ImperialMassUnits.Values...)
}

func (t imperialMassUnits) IsFrom(v string, values ...ImperialMassUnit) bool {
	for _, value := range values {
		if enumer.IsEq[string, ImperialMassUnit](v)(value) {
			return true
		}
	}
	return false
}

func (t imperialMassUnits) Is(v string) bool {
	return t.IsFrom(v, ImperialMassUnits.Values...)
}
