package measurement

import (
	"database/sql/driver"
	"encoding/xml"
	"fmt"
	enumer "github.com/boundedinfinity/enumer"
)

//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Manual changes will be overwritten.                                              *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

type MeasurementFormatType string

func (t MeasurementFormatType) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  JSON serialization
// /////////////////////////////////////////////////////////////////

func (t MeasurementFormatType) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *MeasurementFormatType) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, MeasurementFormatTypes.Parse)
}

// /////////////////////////////////////////////////////////////////
//  YAML serialization
// /////////////////////////////////////////////////////////////////

func (t MeasurementFormatType) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *MeasurementFormatType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, MeasurementFormatTypes.Parse)
}

// /////////////////////////////////////////////////////////////////
//  XML serialization
// /////////////////////////////////////////////////////////////////

func (t MeasurementFormatType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return enumer.MarshalXML(t, e, start)
}

func (t *MeasurementFormatType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	return enumer.UnmarshalXML(t, MeasurementFormatTypes.Parse, d, start)
}

// /////////////////////////////////////////////////////////////////
//  SQL serialization
// /////////////////////////////////////////////////////////////////

func (t MeasurementFormatType) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *MeasurementFormatType) Scan(value interface{}) error {
	return enumer.Scan(value, t, MeasurementFormatTypes.Parse)
}

// /////////////////////////////////////////////////////////////////
//  Companion
// /////////////////////////////////////////////////////////////////

type measurementFormatTypes struct {
	Full         MeasurementFormatType
	Abbreviation MeasurementFormatType
	Values       []MeasurementFormatType
	Err          error
}

var MeasurementFormatTypes = measurementFormatTypes{

	Abbreviation: MeasurementFormatType("abbreviation"),
	Err:          fmt.Errorf("invalid MeasurementFormatType"),
	Full:         MeasurementFormatType("full"),
}

func init() {
	MeasurementFormatTypes.Values = []MeasurementFormatType{
		MeasurementFormatTypes.Full,
		MeasurementFormatTypes.Abbreviation,
	}
}

func (t measurementFormatTypes) newErr(a any, values ...MeasurementFormatType) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		MeasurementFormatTypes.Err,
		a,
		enumer.Join(values, ", "))
}

func (t measurementFormatTypes) ParseFrom(v string, values ...MeasurementFormatType) (MeasurementFormatType, error) {
	var found MeasurementFormatType
	var ok bool

	for _, value := range values {
		if enumer.IsEq[string, MeasurementFormatType](v)(value) {
			found = value
			ok = true
			break
		}
	}

	if !ok {
		return found, t.newErr(v, values...)
	}

	return found, nil
}

func (t measurementFormatTypes) Parse(v string) (MeasurementFormatType, error) {
	return t.ParseFrom(v, MeasurementFormatTypes.Values...)
}

func (t measurementFormatTypes) IsFrom(v string, values ...MeasurementFormatType) bool {
	for _, value := range values {
		if enumer.IsEq[string, MeasurementFormatType](v)(value) {
			return true
		}
	}
	return false
}

func (t measurementFormatTypes) Is(v string) bool {
	return t.IsFrom(v, MeasurementFormatTypes.Values...)
}
