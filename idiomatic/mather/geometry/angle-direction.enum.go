//////////////////////////////////////////////////////////////////
///                                                              /
///                          DO NOT EDIT                         /
///                                                              /
///              Manual changes will be overwritten.             /
///                                                              /
///        Generated by github.com/boundedinfinity/enumer        /
///                                                              /
//////////////////////////////////////////////////////////////////

package geometry

import (
	"database/sql/driver"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"strings"
)

//////////////////////////////////////////////////////////////////
///                                                              /
///                             Type                             /
///                                                              /
//////////////////////////////////////////////////////////////////

type AngleDirection string

//////////////////////////////////////////////////////////////////
///                                                              /
///                    Stringer implemenation                    /
///                                                              /
//////////////////////////////////////////////////////////////////

func (t AngleDirection) String() string {
	return string(t)
}

//////////////////////////////////////////////////////////////////
///                                                              /
///             JSON marshal/unmarshal implemenation             /
///                                                              /
//////////////////////////////////////////////////////////////////

func (t AngleDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(t))
}

func (t *AngleDirection) UnmarshalJSON(data []byte) error {
	var s string

	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	found, err := AngleDirections.Parse(s)

	if err != nil {
		return err
	}

	*t = found
	return nil
}

//////////////////////////////////////////////////////////////////
///                                                              /
///             YAML marshal/unmarshal implemenation             /
///                                                              /
//////////////////////////////////////////////////////////////////

func (t AngleDirection) MarshalYAML() (interface{}, error) {
	return string(t), nil
}

func (t *AngleDirection) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string

	if err := unmarshal(&s); err != nil {
		return err
	}

	found, err := AngleDirections.Parse(s)

	if err != nil {
		return err
	}

	*t = found
	return nil
}

//////////////////////////////////////////////////////////////////
///                                                              /
///              XML marshal/unmarshal implemenation             /
///                                                              /
//////////////////////////////////////////////////////////////////

func (t AngleDirection) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(string(t), start)
}

func (t *AngleDirection) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string

	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}

	found, err := AngleDirections.Parse(s)

	if err != nil {
		return err
	}

	*t = found
	return nil
}

//////////////////////////////////////////////////////////////////
///                                                              /
///              SQL marshal/unmarshal implemenation             /
///                                                              /
//////////////////////////////////////////////////////////////////

func (t AngleDirection) Value() (driver.Value, error) {
	return string(t), nil
}

func (t *AngleDirection) Scan(value interface{}) error {
	if value == nil {
		return AngleDirections.errf(value)
	}

	dv, err := driver.String.ConvertValue(value)

	if err != nil {
		return err
	}

	s, ok := dv.(string)

	if !ok {
		return AngleDirections.errf(value)
	}

	found, err := AngleDirections.Parse(s)

	if err != nil {
		return err
	}

	*t = found
	return nil
}

//////////////////////////////////////////////////////////////////
///                                                              /
///                       Companion struct                       /
///                                                              /
//////////////////////////////////////////////////////////////////

var AngleDirections = angleDirections{
	Err:              fmt.Errorf("invalid AngleDirection"),
	Invalid:          AngleDirection("invalid"),
	Clockwise:        AngleDirection("clockwise"),
	CounterClockwise: AngleDirection("counter-clockwise"),
}

type angleDirections struct {
	Err              error
	errf             func(any, ...AngleDirection) error
	parseMap         map[AngleDirection][]string
	Invalid          AngleDirection
	Clockwise        AngleDirection
	CounterClockwise AngleDirection
}

func (t angleDirections) Values() []AngleDirection {
	return []AngleDirection{
		AngleDirections.Clockwise,
		AngleDirections.CounterClockwise,
	}
}

func (t angleDirections) ParseFrom(v string, items ...AngleDirection) (AngleDirection, error) {
	var found AngleDirection
	var ok bool

	for _, item := range items {
		matchers, ok2 := t.parseMap[item]

		if !ok2 {
			continue
		}

		for _, matcher := range matchers {
			if v == matcher {
				found = item
				ok = true
				break
			}
		}

		if ok {
			break
		}
	}

	if !ok {
		return found, t.errf(v, items...)
	}

	return found, nil
}

func (t angleDirections) Parse(v string) (AngleDirection, error) {
	return t.ParseFrom(v, t.Values()...)
}

func (t angleDirections) IsFrom(v string, items ...AngleDirection) bool {
	_, err := t.ParseFrom(v, items...)
	return err == nil
}

func (t angleDirections) Is(v string) bool {
	return t.IsFrom(v, t.Values()...)
}

//////////////////////////////////////////////////////////////////
///                                                              /
///                        Initialization                        /
///                                                              /
//////////////////////////////////////////////////////////////////

func init() {
	AngleDirections.parseMap = map[AngleDirection][]string{
		AngleDirections.Clockwise:        {"clockwise", "Clockwise"},
		AngleDirections.CounterClockwise: {"counter-clockwise", "CounterClockwise"},
	}

	AngleDirections.errf = func(v any, items ...AngleDirection) error {
		var xs []string

		for _, item := range items {
			if x, ok := AngleDirections.parseMap[item]; ok {
				xs = append(xs, x...)
			}
		}

		return fmt.Errorf(
			"%w: %v is not one of %s",
			AngleDirections.Err,
			v,
			strings.Join(xs, ","),
		)
	}
}
